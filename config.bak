#include <X11/XF86keysym.h>
#include "dwm.c"
#include "drw.h"
/* Constants */
#define TERMINAL "alacritty"
#define BROWSER "brave-browser-nightly"

/* appearance */
static const unsigned int borderpx = 1;    /* border pixel of windows */
static const unsigned int snap = 32;       /* snap pixel */
static const int showbar = 1;              /* 0 means no bar */
static const int topbar = 1;               /* 0 means bottom bar */
static const char *fonts[] = { "monospace:size=10" };
static const char dmenufont[] = "monospace:size=10";

static const char normbordercolor[] = "#212121";
static const char selbordercolor[] = "#212121";
static const char normbgcolor[] = "#1C1C1C";
static const char normfgcolor[] = "#C0C0C0";
static const char selbgcolor[] = "#111111";
static const char selfgcolor[] = "#FDFDFD";

static const char col_gray1[] = "#222222";
static const char col_gray2[] = "#444444";
static const char col_gray3[] = "#bbbbbb";
static const char col_gray4[] = "#eeeeee";
static const char col_cyan[] = "#005577";

static const char *colors[][3] = {
    /* fg         bg         border   */
    [SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
    [SchemeSel] = { col_gray4, col_cyan, col_cyan },
};

/* tagging */
static const char *tags[] = {
    "\uE01E prod",
    "\uE01E dev",
    "\uE01E term",
    "\uE0B2 web",
    "\uE1EB media",
    "\uE0BE misc"
};

static const char Rule  rules[] = {
	/* class      instance    title       tags mask     isfloating   monitor */
	{ "Gimp",      NULL,       NULL,       0,            True,        -1 },
	{ "MPlayer",   NULL,       NULL,       0,            True,        -1 },
	{ "Navigator", NULL,       NULL,       1 << 5,       False,       -1 },
};

/* layout(s) */
static const float mfact = 0.65;
static const int resizehints = 0;         /* False means respect size hints in tiled resizals */

static const char Layout layouts[] = {
  /* symbol     arrange function */
  {"\uE005" , tile}    ,
  {"\uE011" , NULL}    ,
  {"[M]"    , monocle} ,
};

/* custom functions declarations */

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
    { MODKEY, KEY, view, {.ui = 1 << TAG} }, \
    { MODKEY|ControlMask, KEY, toggleview, {.ui = 1 << TAG} }, \
    { MODKEY|ShiftMask, KEY, tag, {.ui = 1 << TAG} }, \
    { MODKEY|ControlMask|ShiftMask, KEY, toggletag, {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static const char *dmenucmd[] = { "dmenu_run", "-fn", font, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
static const char *termcmd[] = { TERMINAL, NULL };
static const char *browser[] = { BROWSER, NULL };
static const char *capture[] = { "flameshot", "gui", NULL };

/* Key bindings */
static const char Key keys[] = {
    /* modifier key        function            argument */
    { MODKEY, XK_p, spawn, SHCMD("dmenu_run -fn 'monospace:size=10' -nb '#1C1C1C' -nf '#C0C0C0' -sb '#111111' -sf '#FDFDFD'") },
    { MODKEY, XK_Return, spawn, SHCMD(TERMINAL) },
    { MODKEY, XK_c, spawn, {.v = capture} },
    { MODKEY | ControlMask, XK_g, spawn, SHCMD("brave-browser-nightly --proxy-server='socks5://localhost:9000'") },
    { MODKEY | ShiftMask, XK_g, spawn, SHCMD("brave-browser-nightly --user-data-dir=$HOME/.config/chromium/local --incognito") },
    { MODKEY, XK_g, spawn, {.v = browser} },
    { MODKEY, XK_Escape, spawn, SHCMD("xscreensaver-command -lock") },
    { MODKEY | ShiftMask, XK_Return, spawn, SHCMD("tabbed -c uxterm -into") },
    { 0, XF86XK_AudioMute, spawn, SHCMD("wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle; kill -44 $(pidof dwmblocks)") },
    { 0, XF86XK_AudioRaiseVolume, spawn, SHCMD("wpctl set-volume @DEFAULT_AUDIO_SINK@ 3%+; kill -44 $(pidof dwmblocks)") },
    { 0, XF86XK_AudioLowerVolume, spawn, SHCMD("wpctl set-volume @DEFAULT_AUDIO_SINK@ 3%-; kill -44 $(pidof dwmblocks)") },
    { MODKEY | ControlMask, XK_g, spawn, {.v = browser} },
	/* Add your other keybindings here */
};

/* custom functions */

int main(int argc, char *argv[]) {
    /* Add your main code here */
    return 0;
}

