"" GENERAL SETTINGS
set nocompatible
set ttyfast " Speed up scrolling in Vim
syntax on
set number
set history=1000
set showmode
set visualbell
set noerrorbells
set autoread
set gcr=a:blinkon0
set relativenumber
set encoding=UTF-8
set nowrap
set linebreak
set autowrite   " Automatically save before commands like :next and :make
set scrolloff=8
set showmatch    " Show matching brackets.
set hidden       " Hide buffers when they are abandoned
set matchpairs+=<:>  " Highlight matching pairs of brackets. '%' character to jump within
set cursorline   " Highlight current cursor
set cursorcolumn
set confirm      " Display a confirmation dialog when closing an unsaved file
set ruler        " Always show current position
set cmdheight=1  " Height of the command bar

set incsearch
set ignorecase
set smartcase
set hlsearch

set guioptions-=r
set guioptions-=R
set guioptions-=l
set guioptions-=L
set noswapfile
set nobackup
set nofoldenable

set autoindent
set smartindent
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab

filetype plugin on
filetype indent on

"" FUNCTIONS
" Auto-compile suckless progs/c files
autocmd BufWritePost config.h,config.def.h !sudo make install
" Disables automatic commenting on newline:
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
" Automatically deletes all trailing whitespace and newlines at end of file on save. & reset cursor position
autocmd BufWritePre * let currPos = getpos(".")
autocmd BufWritePre * %s/\s\+$//e
autocmd BufWritePre * %s/\n\+\%$//e
autocmd BufWritePre *.[ch] %s/\%$/\r/e " add trailing newline for ANSI C standard
autocmd BufWritePre *neomutt* %s/^--$/-- /e " dash-dash-space signature delimiter in emails
autocmd BufWritePre * cal cursor(currPos[1], currPos[2])

"" MAPPING
let mapleader = " " " Maps Leader to space
" Set netrw vsplit width
let g:netrw_winsize = 15
" Auto netrw once open Vim
autocmd VimEnter * Vexplore
" Open terminal inside Vim
map <Leader>tt :vnew term://bash<CR>
" Splits and Tabbed Files
set splitbelow splitright
" Remap splits navigation to just CTRL + hjkl
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" Make adjusting split sizes a bit more friendly
noremap <silent> <C-Left> :vertical resize +3<CR>
noremap <silent> <C-Right> :vertical resize -3<CR>
noremap <silent> <C-Up> :resize +3<CR>
noremap <silent> <C-Down> :resize -3<CR>
" Change 2 split windows from vert to horiz or horiz to vert
map <Leader>th <C-w>t<C-w>H
map <Leader>tk <C-w>t<C-w>K
" Removes pipes | that act as separators on splits
set fillchars+=vert:\
" Open corresponding .pdf/.html or preview
map <leader>p :!opout "%:p"<CR>
" F3 to toggle netrw as vertical split
nnoremap <F3> : Vexplore<CR>
" Map < and > to adjust split window width by 5 characters
nnoremap <C-W><Left> :vertical resize -5<CR>
nnoremap <C-W><Right> :vertical resize +5<CR>

"" FOLD
" za to toggle  http://vimcasts.org/episodes/writing-a-custom-fold-expression/
" Defines a foldlevel for each line of code
function! VimFolds(lnum)
  let s:thisline = getline(a:lnum)
  if match(s:thisline, '^"" ') >= 0
    return '>2'
  endif
  if match(s:thisline, '^""" ') >= 0
    return '>3'
  endif
  let s:two_following_lines = 0
  if line(a:lnum) + 2 <= line('$')
    let s:line_1_after = getline(a:lnum+1)
    let s:line_2_after = getline(a:lnum+2)
    let s:two_following_lines = 1
  endif
  if !s:two_following_lines
    return '='
  else
    if (match(s:thisline, '^"""""') >= 0) &&
       \ (match(s:line_1_after, '^"  ') >= 0) &&
       \ (match(s:line_2_after, '^""""') >= 0)
      return '>1'
    else
      return '='
    endif
  endif
endfunction
" Defines a foldtext
function! VimFoldText()
  " Handle a special case of a normal comment first
  let s:info = '('.string(v:foldend-v:foldstart).' l)'
  if v:foldlevel == 1
    let s:line = ' ◇ '.getline(v:foldstart+1)[3:-2]
  elseif v:foldlevel == 2
    let s:line = '   ●  '.getline(v:foldstart)[3:]
  elseif v:foldlevel == 3
    let s:line = '     ▪ '.getline(v:foldstart)[4:]
  endif
  if strwidth(s:line) > 80 - len(s:info) - 3
    return s:line[:79-len(s:info)-3+len(s:line)-strwidth(s:line)].'...'.s:info
  else
    return s:line.repeat(' ', 80 - strwidth(s:line) - len(s:info)).s:info
  endif
endfunction
" Set foldsettings automatically for vim files
augroup fold_vimrc
  autocmd!
  autocmd FileType vim
    \ setlocal foldmethod=expr |
    \ setlocal foldexpr=VimFolds(v:lnum) |
    \ setlocal foldtext=VimFoldText() |
    \ setlocal foldcolumn=2 foldminlines=2
augroup END
" Toggle folds open&closed by pressing space twice
nnoremap <silent> <leader><Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <leader><space> zf

"" PLUGINS & CONFIGS
" Plugins :PlugInstall, :PlugUninstall ; https://github.com/junegunn/vim-plug
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'dense-analysis/ale'
  Plug 'scrooloose/syntastic'
  Plug 'sheerun/vim-polyglot'

  Plug 'honza/vim-snippets'
  Plug 'sirver/ultisnips'

  Plug 'rip-rip/clang_complete'
  Plug 'octol/vim-cpp-enhanced-highlight'

  Plug 'tpope/vim-fugitive'
  Plug 'plasticboy/vim-markdown'

  Plug 'tpope/vim-vinegar'
  Plug 'godlygeek/tabular'
  Plug 'yggdroot/indentline'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim' " Fuzzy find plugin
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-commentary'
  Plug 'majutsushi/tagbar'
  Plug 'tomasr/molokai'
  Plug 'vim-airline/vim-airline'
  Plug 'kovetskiy/sxhkd-vim'
  Plug 'vim-python/python-syntax'
  Plug 'ap/vim-css-color'

  Plug '907th/vim-auto-save' " Auto saves files as you edit
  Plug 'jdhao/better-escape.vim' " Remaps esc key to jj
call plug#end()

"" CONFIGS
" Plugin Shortcuts
map <Leader>f :NERDTreeToggle<CR>
nnoremap <C-f> :Files!<CR>
nnoremap <Leader>l :Tabularize /
let g:better_escape_shortcut = 'jj'
let g:better_escape_interval = 250

" General Shortcuts
nnoremap S :%s//g<Left><Left>
nmap <Leader>r :w<CR>:so %<CR>
map <Leader>e $

" Lang-servers/completion/syntax
"
"

" :CocInstall extensionname1 extensionname2 ...; :CocConfig;

" Set this variable to 1 to fix files when you save them.
let g:ale_fix_on_save = 1
set omnifunc=ale#completion#OmniFunc
let g:ale_completion_autoimport = 1
let g:ale_disable_lsp = 1
let g:ale_sign_column_always = 1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
" Set this. Airline will handle the rest.
let g:airline#extensions#ale#enabled = 1
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
" Show 5 lines of errors (default: 10)
let g:ale_list_window_size = 5
let g:ale_floating_window_border = repeat([''], 6)

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" UltiSnipsEdit to split window.
let g:UltiSnipsEditSplit="vertical"

" c-n/p to select
" Path to directory where the library can be found
let g:clang_library_path='/usr/lib/llvm-3.8/lib'
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_posix_standard = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_concepts_highlight = 1
let g:cpp_no_function_highlight = 1

" Git/Markdown
" Markdown Edits
let g:vim_markdown_autowrite = 1
let g:vim_markdown_no_extensions_in_markdown = 1
let g:vim_markdown_conceal = 0
let g:vim_markdown_override_foldtext = 0
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_new_list_item_indent = 0
let g:instant_markdown_autostart = 0
let g:instant_markdown_browser = "brave-browser-nightly"
map <Leader>md :InstantMarkdownPreview<CR>
map <Leader>ms :InstantMarkdownStop<CR>

" Markdown auto format tables
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" Transparent bg
autocmd vimenter * hi Normal guibg=NONE ctermbg=NONE

" Utilities
let g:indentLine_setColors = 0
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:indentLine_concealcursor = 'inc'
let g:indentLine_conceallevel = 2

let $FZF_DEFAULT_COMMAND = 'fdfind --type f --hidden --follow --exclude .git --ignore-file ~/.ignore'

colorscheme molokai

let g:auto_save = 1
let g:auto_save_events = ["InsertLeave", "TextChanged"]

nmap <F8> :TagbarToggle<CR>
let g:molokai_original = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

let g:python_highlight_all = 1

au! BufRead,BufWrite,BufWritePost,BufNewFile *.org
au BufEnter *.org            call org#SetOrgFileType()

set guioptions-=m  " Remove menu bar
set guioptions-=T  " Remove toolbar
set guioptions-=r  " Remove right-hand scroll bar
set guioptions-=L  " Remove left-hand scroll bar
